# .github/workflows/update-status.yml
name: Update Service Status

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install cheerio axios
    
    - name: Check service statuses
      run: |
        cat > check-status.js << 'EOF'
        const axios = require('axios');
        const cheerio = require('cheerio');
        const fs = require('fs');

        // Original services
        async function checkConfluentStatus() {
          try {
            const response = await axios.get('https://status.confluent.cloud/api/v2/status.json', {
              timeout: 10000
            });
            const data = response.data;
            return {
              name: 'confluent',
              displayName: 'Confluent Cloud',
              status: mapStatusPageIndicator(data.status.indicator),
              description: data.status.description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Confluent check failed:', error.message);
            return createErrorStatus('confluent', 'Confluent Cloud');
          }
        }

        async function checkCloudflareStatus() {
          try {
            const response = await axios.get('https://www.cloudflarestatus.com/api/v2/status.json', {
              timeout: 10000
            });
            const data = response.data;
            return {
              name: 'cloudflare',
              displayName: 'Cloudflare',
              status: mapStatusPageIndicator(data.status.indicator),
              description: data.status.description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Cloudflare check failed:', error.message);
            return createErrorStatus('cloudflare', 'Cloudflare');
          }
        }

        async function checkNylasStatus() {
          try {
            const response = await axios.get('https://status-v3.nylas.com/', {
              timeout: 15000,
              headers: {
                'User-Agent': 'Mozilla/5.0 (compatible; StatusBot/1.0)'
              }
            });
            
            const $ = cheerio.load(response.data);
            const pageText = response.data.toLowerCase();
            
            console.log('Nylas page loaded, analyzing content...');
            
            let status = 'operational';
            let description = 'All systems operational';
            
            // Look for the main status indicators in order of severity
            if (pageText.includes('investigating -') || pageText.includes('investigating:')) {
              status = 'outage';
              description = 'Currently investigating service issues';
              console.log('Nylas: Found "investigating" status');
            } 
            else if (pageText.includes('identified -') || pageText.includes('identified:')) {
              status = 'outage';  
              description = 'Service issues identified';
              console.log('Nylas: Found "identified" status');
            }
            else if (pageText.includes('monitoring -') || pageText.includes('monitoring:')) {
              status = 'degraded';
              description = 'Service issues being monitored';
              console.log('Nylas: Found "monitoring" status');
            }
            else if (pageText.includes('update -') || pageText.includes('update:')) {
              const hasRecentUpdate = pageText.includes('jul 31') || 
                                    pageText.includes('jul 30') || 
                                    pageText.includes('hours ago') ||
                                    pageText.includes('minutes ago');
              if (hasRecentUpdate) {
                status = 'degraded';
                description = 'Recent service updates detected';
                console.log('Nylas: Found recent updates');
              }
            }
            else if (pageText.includes('resolved -') || pageText.includes('resolved:')) {
              const hasVeryRecentResolution = pageText.includes('jul 31') || 
                                            pageText.includes('hours ago') ||
                                            pageText.includes('minutes ago');
              if (hasVeryRecentResolution) {
                status = 'degraded';
                description = 'Recently resolved issues, monitoring stability';
                console.log('Nylas: Found very recent resolution');
              } else {
                status = 'operational';
                description = 'All systems operational';
                console.log('Nylas: Found older resolved incidents, marking operational');
              }
            }
            
            console.log(`Nylas final status: ${status} - ${description}`);
            
            return {
              name: 'nylas',
              displayName: 'Nylas',
              status: status,
              description: description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Nylas check failed:', error.message);
            return createErrorStatus('nylas', 'Nylas');
          }
        }

        // New email/communication services
        async function checkSendGridStatus() {
          try {
            const response = await axios.get('https://status.sendgrid.com/api/v2/status.json', {
              timeout: 10000
            });
            const data = response.data;
            return {
              name: 'sendgrid',
              displayName: 'SendGrid',
              status: mapStatusPageIndicator(data.status.indicator),
              description: data.status.description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('SendGrid check failed:', error.message);
            return createErrorStatus('sendgrid', 'SendGrid');
          }
        }

        async function checkTwilioStatus() {
          try {
            const response = await axios.get('https://status.twilio.com/api/v2/status.json', {
              timeout: 10000
            });
            const data = response.data;
            return {
              name: 'twilio',
              displayName: 'Twilio Communications',
              status: mapStatusPageIndicator(data.status.indicator),
              description: data.status.description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Twilio check failed:', error.message);
            return createErrorStatus('twilio', 'Twilio Communications');
          }
        }

        async function checkPostmarkStatus() {
          try {
            const response = await axios.get('https://status.postmarkapp.com/api/v1/page', {
              timeout: 10000
            });
            const data = response.data;
            
            // Postmark uses Sorry's API format
            let status = 'operational';
            let description = data.page.state_text || 'All systems operational';
            
            switch (data.page.state) {
              case 'operational':
                status = 'operational';
                break;
              case 'degraded':
                status = 'degraded';
                break;
              case 'maintenance':
                status = 'degraded';
                description = 'Scheduled maintenance in progress';
                break;
              default:
                status = 'unknown';
                break;
            }
            
            return {
              name: 'postmark',
              displayName: 'Postmark',
              status: status,
              description: description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Postmark check failed:', error.message);
            return createErrorStatus('postmark', 'Postmark');
          }
        }

        async function checkZohoMailStatus() {
          try {
            // Zoho doesn't have a simple status API, so we'll check their main status page
            const response = await axios.get('https://zohostatus.com/', {
              timeout: 15000,
              headers: {
                'User-Agent': 'Mozilla/5.0 (compatible; StatusBot/1.0)'
              }
            });
            
            const $ = cheerio.load(response.data);
            const pageText = response.data.toLowerCase();
            
            let status = 'operational';
            let description = 'All systems operational';
            
            // Look for Mail-specific issues
            if (pageText.includes('mail') && (pageText.includes('down') || pageText.includes('outage'))) {
              status = 'outage';
              description = 'Mail service experiencing issues';
            } else if (pageText.includes('mail') && (pageText.includes('degraded') || pageText.includes('slow'))) {
              status = 'degraded';
              description = 'Mail service experiencing performance issues';
            } else if (pageText.includes('all systems operational') || pageText.includes('no incidents')) {
              status = 'operational';
              description = 'All systems operational';
            }
            
            return {
              name: 'zohomail',
              displayName: 'Zoho Mail',
              status: status,
              description: description,
              lastChecked: new Date().toISOString()
            };
          } catch (error) {
            console.error('Zoho Mail check failed:', error.message);
            return createErrorStatus('zohomail', 'Zoho Mail');
          }
        }

        async function checkMailgunStatus() {
          try {
            // Check if Mailgun has an API endpoint (likely uses StatusPage.io)
            let response;
            try {
              response = await axios.get('https://status.mailgun.com/api/v2/status.json', {
                timeout: 10000
              });
              const data = response.data;
              return {
                name: 'mailgun',
                displayName: 'Mailgun',
                status: mapStatusPageIndicator(data.status.indicator),
                description: data.status.description,
                lastChecked: new Date().toISOString()
              };
            } catch (apiError) {
              // Fallback to HTML parsing if API doesn't exist
              response = await axios.get('https://status.mailgun.com/', {
                timeout: 15000,
                headers: {
                  'User-Agent': 'Mozilla/5.0 (compatible; StatusBot/1.0)'
                }
              });
              
              const $ = cheerio.load(response.data);
              const pageText = response.data.toLowerCase();
              
              let status = 'operational';
              let description = 'All systems operational';
              
              if (pageText.includes('investigating') || pageText.includes('identified')) {
                status = 'outage';
                description = 'Service issues detected';
              } else if (pageText.includes('monitoring') || pageText.includes('degraded')) {
                status = 'degraded';
                description = 'Service partially affected';
              } else if (pageText.includes('all systems operational') || pageText.includes('operational')) {
                status = 'operational';
                description = 'All systems operational';
              }
              
              return {
                name: 'mailgun',
                displayName: 'Mailgun',
                status: status,
                description: description,
                lastChecked: new Date().toISOString()
              };
            }
          } catch (error) {
            console.error('Mailgun check failed:', error.message);
            return createErrorStatus('mailgun', 'Mailgun');
          }
        }

        // Helper functions
        function mapStatusPageIndicator(indicator) {
          switch (indicator) {
            case 'none':
              return 'operational';
            case 'minor':
              return 'degraded';
            case 'major':
            case 'critical':
              return 'outage';
            default:
              return 'unknown';
          }
        }

        function createErrorStatus(name, displayName) {
          return {
            name: name,
            displayName: displayName,
            status: 'unknown',
            description: 'Failed to fetch status - check manually',
            lastChecked: new Date().toISOString()
          };
        }

        function determineOverallStatus(services) {
          const hasOutage = services.some(s => s.status === 'outage');
          const hasDegraded = services.some(s => s.status === 'degraded');
          const hasUnknown = services.some(s => s.status === 'unknown');
          
          if (hasOutage) return 'outage';
          if (hasDegraded) return 'degraded';
          if (hasUnknown) return 'unknown';
          return 'operational';
        }

        async function main() {
          console.log('Checking service statuses...');
          
          const [confluent, cloudflare, nylas, sendgrid, twilio, postmark, zohomail, mailgun] = await Promise.all([
            checkConfluentStatus(),
            checkCloudflareStatus(),
            checkNylasStatus(),
            checkSendGridStatus(),
            checkTwilioStatus(),
            checkPostmarkStatus(),
            checkZohoMailStatus(),
            checkMailgunStatus()
          ]);
          
          const services = [confluent, cloudflare, nylas, sendgrid, twilio, postmark, zohomail, mailgun];
          
          const statusData = {
            services: services,
            lastUpdated: new Date().toISOString(),
            overallStatus: determineOverallStatus(services)
          };
          
          // Write to status.json
          fs.writeFileSync('status.json', JSON.stringify(statusData, null, 2));
          
          console.log('Status check complete:');
          services.forEach(service => {
            console.log(`- ${service.displayName}: ${service.status}`);
          });
          console.log(`- Overall: ${statusData.overallStatus}`);
        }

        main().catch(console.error);
        EOF
        
        node check-status.js
    
    - name: Commit and push status update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add status.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update service status - $(date -u)"
          git push
        fi